# Group Messaging API Documentation

## Overview
This document provides a comprehensive guide to the Group Messaging API, including endpoints, request/response formats, headers, and error handling. 
The API supports user registration, group management, messaging, and more.

---

## Common Headers

### Request Headers
- `Content-Type: application/`
- `Authorization: Bearer <JWT_TOKEN>` (if required)
- `Accept: application/`
- `Accept-Encoding: gzip, deflate, br`
- `X-Request-ID: <unique_id>`
- `X-Forwarded-For: <client_ip>`

### Response Headers
- `Content-Type: application/`
- `Content-Encoding: gzip` (if compressed)
- Security Headers:
  - `Content-Security-Policy`
  - `X-Content-Type-Options`
  - `X-Frame-Options`

---

## API Endpoints

### 1. User Registration API
- **Endpoint**: `/register`
- **Verb**: `POST`
- **Request Headers**: `Content-Type: application/`
- **Request Body**:
  {
    "email": "user@example.com",
    "password": "password123"
  }

- **Response (201)**:
  {
    "message": "Registration successful. Please log in."
  }

- **Validation Errors (400)**:
  {"error": "Email is required."}
  {"error": "Invalid email format."}
  {"error": "Password is required."}
  {"error": "Password must be at least 8 characters long."}

- **Conflict Error (409)**:
  {"error": "Email address already exists."}

---

### 2. Login API
- **Endpoint**: `/login`
- **Verb**: `POST`
- **Request Headers**: `Content-Type: application/`
- **Request Body**:
  {
    "email": "user@example.com",
    "password": "password123"
  }

- **Response (200)**:
  {
    "token": "jwt_token_here"
  }

- **Validation Errors (400)**:
  {"error": "Email is required."}
  {"error": "Password is required."}

- **Authentication Error (401)**:
  {"error": "Invalid credentials."}

---

### 3. Create Group API
- **Endpoint**: `/groups/create`
- **Verb**: `POST`
- **Request Headers**: `Content-Type: application/`, `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**:
  {
    "group_name": "My Group",
    "group_type_id": 1,
    "max_members": 10
  }

- **Response (201)**:
  {
    "group_id": 123
  }

- **Validation Errors (400)**:
  {"error": "group_name is required."}
  {"error": "group_type is required."}
  {"error": "group_type must be 'private' or 'open'."}
  {"error": "max_members must be a number."}
  {"error": "max_members must be at least 2."}

- **Authorization Error (401)**:
  {"error": "Unauthorized."}

---

### 4. Join Group API
- **Endpoint**: `/groups/join`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5,
		"user_id": 1
	}

- **Response (200 - Open Group)**:
  {
    "message": "Successfully joined the group."
  }

  A banished user to submit a new join request (requires owner approval).
- **Response (202 - Private Group OR a banished member)**:
  {
    "message": "Join request submitted."
  }

- **Validation Errors (400)**:
  {"error": "Already a member of this group."}
  {"error": "Already requested to join this group."}

- **Forbidden Error (403)**:
  {"error": "You have been banished from this group."}

- **Not Found Error (404)**:
  {"error": "Group not found."}

- **Authorization Error (401)**:
  {"error": "Unauthorized."}

---

### 5. Leave Group API
- **Endpoint**: `/groups/leave`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5,
		"user_id": 1
	}

- **Response (200)**:
  {
    "message": "Successfully left the group."
  }

- **Not Found Error (404)**:
  {"error": "Group not found or you are not a member."}

- **Authorization Error (401)**:
  {"error": "Unauthorized."}

---

### 6. Get Pending Join Requests API
- **Endpoint**: `/groups/getJoinRequests`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5
	}

- **Response (200)**:
  [
    {
      "request_id": 1,
      "user_id": 123,
      "email": "user@example.com",
      "request_timestamp": "2025-04-19T10:00:00Z"
    }
  ]

- **Not Found Error (404)**:
  {"error": "Group not found."}

- **Authorization Error (403)**:
  {"error": "You are not the owner of this group."}
  
	If a user leaves a private group, they must wait 48 hours before they can request to join that group again.  
	{"error": "You have to wait for 48 hrs."}
  

### 7. Approve/Decline Join Requests API
- **Endpoint**: `/groups/approveJoinRequests`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5,
		"request_id": 1,
		"is_approved": false,
		"comments": "Not from a approved country."
	}

- **Response (200)**:
  [
    {
      "message": "Rejected as not from a approved country."
    }
  ]

- **Not Found Error (404)**:
  {"error": "Group not found."}
  {"error": "Request not found."}

- **Authorization Error (403)**:
  {"error": "You are not the owner of this group."}  
  
- **Already Approved/Rejected Error (403)**:
  {"error": "Request is already approved or Rejected."}   

### 8. Transfer Ownership API  
- **Endpoint**: `/groups/transferOwnership`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5,
		"owner_id": 1,
		"new_owner_id": 3
	}

- **Response (200)**:
  [
    {}
  ]

- **Not Found Error (404)**:
  {"error": "Group not found."}
  {"error": "Owner not found."}
  {"error": "New Owner not found."}

- **Authorization Error (403)**:
  {"error": "You are not the owner of this group."}  
  
- **Already Approved/Rejected Error (403)**:
  {"error": "Owner and New Owner Cannot be the same."}  
  
### 9. Delete Group API  
- **Endpoint**: `/groups/delete`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5,
		"owner_id": 1
	}

- **Response (200)**:
  [
    {}
  ]

- **Not Found Error (404)**:
  {"error": "Group not found."}
  {"error": "Owner not found."}

- **Authorization Error (403)**:
  {"error": "You are not the owner of this group."}  
  
- **Validation Error (400)**:
  {"error": "Other group members are present, cannot delete this group"}    
  
### 10. Banish a Member API  
- **Endpoint**: `/groups/banishment`
- **Verb**: `POST`
- **Request Headers**: `Authorization: Bearer <JWT_TOKEN>`
- **Request Body**: 
	{
		"group_id": 5,
		"member_id": 6,
		"comments": "Due to wrong words, you have been banished"
	}

- **Response (200)**:
  [
    {}
  ]

- **Not Found Error (404)**:
  {"error": "Group not found."}
  {"error": "Member not found."}

- **Authorization Error (403)**:
  {"error": "You are not the member of this group."}  
  
- **Validation Error (400)**:
  {"error": "You are already banished"}      
---

### 11. Health Check API
- **Endpoint**: `/health`
- **Verb**: `GET`
- **Request Headers**: None
- **Request Body**: None

- **Response (200)**:
  {
    "status": "healthy",
    "uptime": "2 days, 4 hours, 30 minutes",
    "timestamp": "2025-04-19T10:00:00Z"
  }

---

### 12. Send Message API
Endpoint: /messages/send
Verb: POST
Request Headers:
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json
Request Body:
{
  "group_id": 123,
  "sender_id": 123,
  "content_encrypted": "base64_encoded_string"
}

**Response (200)**:
{
  "message_id": 456,
  "message": "Message sent successfully."
}

Validation Errors (400):
{"error": "Group ID is required."}
{"error": "Sender ID is required."}
{"error": "Message content is required."}

Not Found Error (404):
{"error": "Group not found."}
{"error": "Sender not found."}

Forbidden Error (403):
{"error": "You are not a member of this group."}


### 13. Retrieve Messages API
Endpoint: /messages/getMessages
Verb: POST
Request Headers:
Authorization: Bearer <JWT_TOKEN>
Request:
{
	current_page: 1,
	number_of_records: 10
}

Response (200):
{
  "messages": [
    {
      "message_id": 123,
      "sender_id": 456,
      "content_encrypted": "base64_encoded_string",
      "timestamp": "2025-04-19T10:00:00Z"
    },
    {
      "message_id": 124,
      "sender_id": 789,
      "content_encrypted": "base64_encoded_string",
      "timestamp": "2025-04-19T10:05:00Z"
    }
  ],
  "pagination": {
    "current_page": 1,
    "total_pages": 5,
    "total_messages": 50
  }
}

Validation Errors (400):
{"error": "Invalid page or limit parameter."}

Not Found Error (404):
{"error": "Group not found."}

Authorization Error (401):
{"error": "Unauthorized."}

Forbidden Error (403):
{"error": "You are not a member of this group."}
